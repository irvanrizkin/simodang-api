// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id               @default(cuid())
  email         String        @unique
  uid           String        @unique
  name          String        @default("")
  phoneNum      String        @default("")
  address       String        @default("")
  photo         String        @default("https://placehold.co/500x500.png")
  role          String        @default("user")
  createdAt     DateTime      @default(now())
  notifications Notification[]
  masters       Master[]
  devices       Device[]
  ponds         Pond[]
  subscriptions Subscription[]
  transactions  Transaction[]

  @@map("user")
}

model Article {
  id            String        @id
  title         String        @default("")
  url           String        @db.Text
  image         String        @db.Text
  published     Boolean       @default(false)
  createdAt     DateTime      @default(now())

  @@map("article")
}

model Notification {
  id            String        @id
  title         String        @default("")
  message       String        @default("")
  deleted       Boolean       @default(false)
  isRead        Boolean       @default(false)
  createdAt     DateTime      @default(now())
  user          User          @relation(fields: [userId], references: [id])
  userId        String

  @@map("notification")
}

model Master {
  id            String        @id
  name          String        @default("")
  simNumber     String        @default("")
  createdAt     DateTime      @default(now())
  user          User?         @relation(fields: [userId], references: [id])
  userId        String?
  devices       Device[]

  @@map("master")
}

model Device {
  id                    String        @id
  name                  String        @default("")
  notificationEnabled   Boolean       @default(true)
  notificationCount     Int           @default(0)
  isSaved               Boolean       @default(false)
  isChanged             Boolean       @default(false)
  autoWaterEnabled      Boolean       @default(false)
  autoFeedEnabled       Boolean       @default(false)
  tempLow               Decimal       @default(0)   @db.Decimal(10,1)
  tempHigh              Decimal       @default(0)   @db.Decimal(10,1)
  phLow                 Decimal       @default(0)   @db.Decimal(10,1)
  phHigh                Decimal       @default(0)   @db.Decimal(10,1)
  tdoLow                Decimal       @default(0)   @db.Decimal(10,1)
  tdoHigh               Decimal       @default(0)   @db.Decimal(10,1)
  tdsLow                Decimal       @default(0)   @db.Decimal(10,1)
  tdsHigh               Decimal       @default(0)   @db.Decimal(10,1)
  turbiditiesLow        Decimal       @default(0)   @db.Decimal(10,1)
  turbiditiesHigh       Decimal       @default(0)   @db.Decimal(10,1)
  createdAt             DateTime      @default(now())
  user                  User?         @relation(fields: [userId], references: [id])
  userId                String?
  master                Master?       @relation(fields: [masterId], references: [id])
  masterId              String?
  pond                  Pond?
  metrics               Metric[]
  metricsTemp           MetricTemp[]

  @@map("device")
}

model Pond {
  id                    String        @id             @default(cuid())
  name                  String        @default("")
  address               String        @default("")
  city                  String        @default("")
  seedDate              DateTime      @default(now())
  seedCount             Int           @default(0)
  imageUrl              String        @db.Text        
  status                Boolean       @default(false)
  isFilled              Boolean       @default(false)
  createdAt             DateTime      @default(now())
  user                  User?         @relation(fields: [userId], references: [id])
  userId                String?
  device                Device?       @relation(fields: [deviceId], references: [id])
  deviceId              String?       @unique
  metrics               Metric[]
  metricsTemp           MetricTemp[]

  @@map("pond")
}

model Metric {
  id                    String        @id
  temperature           Decimal       @default(0)       @db.Decimal(10,1)
  ph                    Decimal       @default(0)       @db.Decimal(10,1)
  tdo                   Decimal       @default(0)       @db.Decimal(10,1)
  tds                   Decimal       @default(0)       @db.Decimal(10,1)
  turbidity             Decimal       @default(0)       @db.Decimal(10,1)
  createdAt             DateTime      @default(now())
  createdAtWib          String        @default("")
  device                Device?       @relation(fields: [deviceId], references: [id])
  deviceId              String?
  pond                  Pond?         @relation(fields: [pondId], references: [id])
  pondId                String?

  @@map("metric")
}

model MetricTemp {
  id                    String        @id
  temperature           Decimal       @default(0)       @db.Decimal(10,1)
  ph                    Decimal       @default(0)       @db.Decimal(10,1)
  tdo                   Decimal       @default(0)       @db.Decimal(10,1)
  tds                   Decimal       @default(0)       @db.Decimal(10,1)
  turbidity             Decimal       @default(0)       @db.Decimal(10,1)
  createdAt             DateTime      @default(now())
  createdAtWib          String        @default("")
  device                Device?       @relation(fields: [deviceId], references: [id])
  deviceId              String?
  pond                  Pond?         @relation(fields: [pondId], references: [id])
  pondId                String?

  @@map("metrictemp")
}

model Log {
  id                    String        @id
  scope                 String        @default("")
  summary               String        @default("")
  createdAt             DateTime      @default(now())

  @@map("log")
}

model PricingPlan {
  id                    String        @id                   @default(cuid())
  name                  String        @default("")
  description           String        @default("")
  pondLimit             Int           @default(0)
  duration              Int           @default(0)
  price                 Int           @default(0)
  createdAt             DateTime      @default(now())
  subscriptions         Subscription[]

  @@map("pricingplan")
}

model Subscription {
  id                    String        @id                   @default(cuid())
  status                Int           @db.TinyInt()         @default(0)
  expiredAt             DateTime      @default(now())
  createdAt             DateTime      @default(now())
  isPaid                Boolean       @default(false)
  user                  User?         @relation(fields: [userId], references: [id])
  userId                String?
  pricingPlan           PricingPlan?  @relation(fields: [pricingPlanId], references: [id])
  pricingPlanId         String?
  transactions          Transaction[]

  @@map("subscription")
}

model Transaction {
  id                    String        @id                   @default(cuid())
  status                Int           @db.TinyInt()         @default(0)
  amount                Int           @default(0)
  expiredAt             DateTime      @default(now())
  createdAt             DateTime      @default(now())
  user                  User?         @relation(fields: [userId], references: [id])
  userId                String?
  subscription          Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId        String?
  paymentLink           String        @default("")

  @@map("transaction")
}

model Sidebar {
  id                    String        @id                 @default(cuid())
  label                 String        @default("")
  parentId              String        @default("")
  icon                  String        @default("")
  order                 Int           @default(0)

  @@map("sidebar")
}
